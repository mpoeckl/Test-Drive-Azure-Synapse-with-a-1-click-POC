{
	"name": "ExportSqlTableToJson",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ws1sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6c8651d2-268c-4a09-a218-e2856090b668"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/b36e222b-14e4-44a9-82fa-d9e03b9d6551/resourceGroups/analyticshub/providers/Microsoft.Synapse/workspaces/mpajn6axh2pc3wispocws1/bigDataPools/ws1sparkpool1",
				"name": "ws1sparkpool1",
				"type": "Spark",
				"endpoint": "https://mpajn6axh2pc3wispocws1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ws1sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 5,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\n",
					"val df = spark.read.sqlanalytics(\"mpajn6axh2pc3wispocws1p1.dbo.TripsData\")\n",
					"\n",
					"val autoJson = df.toJSON\n",
					"\n",
					"//val str = autoJson.collect.mkString(\"[\", \",\" , \"]\" )\n",
					"//autoJson.write.text(\"abfss://public@mpajn6axh2pc3wispoc.dfs.core.windows.net/export/tripfares-sparkexport-autoJson.json\")\n",
					"display(autoJson)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"case class medallion(id:String)\r\n",
					"case class hack_license(dep_id:String)\r\n",
					"case class vendor_id(dep_id:String)\r\n",
					"case class rate_code(dep_id:String)\r\n",
					"case class store_and_fwd_flag(dep_id:String)\r\n",
					"case class passenger_count(dep_id:String)\r\n",
					"case class trip_time_in_secs(dep_id:String)\r\n",
					"case class trip_distance(dep_id:String)\r\n",
					"case class pickup_datetime(dep_id:String)\r\n",
					"case class pickup_longitude(dep_id:String)\r\n",
					"case class pickup_latitude(dep_id:String)\r\n",
					"case class dropoff_datetime(dep_id:String)\r\n",
					"case class dropoff_longitude(dep_id:String)\r\n",
					"case class dropoff_latitude(dep_id:String)\r\n",
					"\r\n",
					"\r\n",
					"case class pickup(pickup_datetime:pickup_datetime, pickup_longitude:pickup_longitude, pickup_latitude:pickup_latitude)//,name:String,position:String,depId:depId)\r\n",
					"case class dropoff(dropoff_datetime:dropoff_datetime, dropoff_longitude:dropoff_longitude, dropoff_latitude:dropoff_latitude) \r\n",
					"\r\n",
					"//case class code(manager_id:String)\r\n",
					"//case class reporting(reporting:Array[code])\r\n",
					"\r\n",
					"case class trip_record(medallion:medallion,hack_license:hack_license,vendor_id:vendor_id,rate_code:rate_code,store_and_fwd_flag:store_and_fwd_flag,passenger_count:passenger_count, _\r\n",
					" trip_time_in_secs:trip_time_in_secs, trip_distance:trip_distance, pickup:pickup, dropoff:dropoff)\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"val nestedDF= df.map(r=>{\r\n",
					"val medallion= medallion(r.getString(0))\r\n",
					"val hack_license = hack_license(r.getString(7))\r\n",
					"val details_1=details(empID_1,r.getString(1),r.getString(2),depId_1)\r\n",
					"val code_1=code(r.getString(3)) \r\n",
					"val reporting_1 = reporting(Array(code_1))\r\n",
					"val hireDate_1 = hireDate(r.getString(4))\r\n",
					"emp_record(details_1,r.getString(8),r.getString(6),r.getString(9),hireDate_1,reporting_1)\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}
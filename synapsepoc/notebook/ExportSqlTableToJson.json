{
	"name": "ExportSqlTableToJson",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ws1sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "0cbeb8a3-0c92-4e15-9443-044287adebcf"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/b36e222b-14e4-44a9-82fa-d9e03b9d6551/resourceGroups/analyticshub/providers/Microsoft.Synapse/workspaces/mpajn6axh2pc3wispocws1/bigDataPools/ws1sparkpool1",
				"name": "ws1sparkpool1",
				"type": "Spark",
				"endpoint": "https://mpajn6axh2pc3wispocws1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ws1sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 5,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\n",
					"val df = spark.read.sqlanalytics(\"mpajn6axh2pc3wispocws1p1.dbo.TripsData\")\n",
					"//df.show\n",
					"//df.write.mode(\"overwrite\").saveAsTable(\"default.TripsData\")\n",
					"\n",
					"  //.map(jsonString => s\"  $jsonString\")\n",
					"val rawJson = df.toJSON\n",
					"  //.withColumn(\"order\", (count(\"value\").over(window) % lit(2)) + lit(1))\n",
					"  //.withColumn(\"value\", when(col(\"order\").equalTo(1), concat(col(\"value\"), lit(\",\"))).otherwise(col(\"value\")))\n",
					"  //.unionByName(Seq((0, \"[\"), (3, \"]\")).toDF(\"order\", \"value\"))\n",
					"\n",
					"\n",
					"rawJson.show"
				],
				"execution_count": 6
			}
		]
	}
}